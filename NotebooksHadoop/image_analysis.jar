import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;

public class ImageCountByCategory {

    public static class CategoryMapper extends Mapper<Object, Text, Text, IntWritable> {
        private final static IntWritable one = new IntWritable(1);
        private Text categoryKey = new Text();

        public void map(Object key, Text value, Context context) throws IOException, InterruptedException {
            String line = value.toString();
            String[] fields = line.split(",");

            // Assuming `image_url` is the second column and `categories` is the third column in the CSV
            if (fields.length >= 3) {
                String imageUrl = fields[1].trim();
                String category = fields[2].trim();

                if (!imageUrl.isEmpty()) {
                    categoryKey.set(category);
                    context.write(categoryKey, one);
                }
            }
        }
    }

    public static class CategoryReducer extends Reducer<Text, IntWritable, Text, IntWritable> {
        private Map<String, Integer> categoryCounts = new HashMap<>();

        public void reduce(Text key, Iterable<IntWritable> values, Context context) throws IOException, InterruptedException {
            int count = 0;
            for (IntWritable val : values) {
                count += val.get();
            }
            categoryCounts.put(key.toString(), count);
        }

        @Override
        protected void cleanup(Context context) throws IOException, InterruptedException {
            // Priority queue to get top N categories with most images
            PriorityQueue<Map.Entry<String, Integer>> topCategories = new PriorityQueue<>((a, b) -> b.getValue().compareTo(a.getValue()));

            topCategories.addAll(categoryCounts.entrySet());

            int count = 0;
            int topN = 10;
            while (!topCategories.isEmpty() && count < topN) {
                Map.Entry<String, Integer> entry = topCategories.poll();
                context.write(new Text(entry.getKey()), new IntWritable(entry.getValue()));
                count++;
            }
        }
    }

    public static void main(String[] args) throws Exception {
        Configuration conf = new Configuration();
        Job job = Job.getInstance(conf, "Image Count by Article Category");

        job.setJarByClass(ImageCountByCategory.class);
        job.setMapperClass(CategoryMapper.class);
        job.setReducerClass(CategoryReducer.class);

        job.setOutputKeyClass(Text.class);
        job.setOutputValueClass(IntWritable.class);

        FileInputFormat.addInputPath(job, new Path(args[0]));
        FileOutputFormat.setOutputPath(job, new Path(args[1]));

        System.exit(job.waitForCompletion(true) ? 0 : 1);
    }
}
